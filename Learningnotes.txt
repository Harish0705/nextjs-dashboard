How NextJs solves Cumulative Layout Shift 
Issue:
Fonts play a significant role in the design of a website, but using custom fonts in your project 
can affect performance if the font files need to be fetched and loaded.
Cumulative Layout Shift is a metric used by Google to evaluate the performance and user experience of a website.
With fonts, layout shift happens when the browser initially renders text in a fallback or system font and 
then swaps it out for a custom font once it has loaded. 
This swap can cause the text size, spacing, or layout to change, shifting elements around it.

Solution:
Next.js automatically optimizes fonts in the application when you use the next/font module. 
It downloads font files at build time and hosts them with your other static assets. 
This means when a user visits your application, there are no additional network requests for fonts 
which would impact performance.

Why optimize images?
Next.js can serve static assets, like images, under the top-level /public folder. Files inside /public 
can be referenced in your application.

Challenges with img rendering:

Ensure your image is responsive on different screen sizes.
Specify image sizes for different devices.
Prevent layout shift as the images load.
Lazy load images that are outside the user's viewport.

NextJs <Image> component solves the above challenges
The <Image> Component is an extension of the HTML <img> tag, and comes with automatic image optimization, 
such as:

Preventing layout shift automatically when images are loading.
Resizing images to avoid shipping large images to devices with a smaller viewport.
Lazy loading images by default (images load as they enter the viewport).
Serving images in modern formats, like WebP and AVIF, when the browser supports it.

----------------------------------------------------------------------------------------------------

Layout: In Next.js, you can use a special layout.tsx file to create UI that is shared between multiple pages.
layout component takes the one or more page component or another layout as children and it can contain a 
component component shared across pages. 
Example. layout component in the dashboard folder app/dashboard/layout.tsx has the SideNav component that is shared across 
customers and invoices pages 

Root Layout: Any UI you add to the root layout will be shared across all pages in your application. 
You can use the root layout to modify your <html> and <body> tags, and add metadata.

The layout in /app/dashboard/layout.tsx is unique to the dashboard pages, you don't need to add any UI to the 
root layout.

Partial rendering:
One benefit of using layouts in Next.js is that on navigating to other pages, only the page components update 
while the layout won't re-render. In our example, the layout with SideNav does not re-render, only the customers 
and invoices pages page component is rendered