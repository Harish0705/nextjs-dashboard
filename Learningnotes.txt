How NextJs solves Cumulative Layout Shift 
Issue:
Fonts play a significant role in the design of a website, but using custom fonts in your project 
can affect performance if the font files need to be fetched and loaded.
Cumulative Layout Shift is a metric used by Google to evaluate the performance and user experience of a website.
With fonts, layout shift happens when the browser initially renders text in a fallback or system font and 
then swaps it out for a custom font once it has loaded. 
This swap can cause the text size, spacing, or layout to change, shifting elements around it.

Solution:
Next.js automatically optimizes fonts in the application when you use the next/font module. 
It downloads font files at build time and hosts them with your other static assets. 
This means when a user visits your application, there are no additional network requests for fonts 
which would impact performance.

Why optimize images?
Next.js can serve static assets, like images, under the top-level /public folder. Files inside /public 
can be referenced in your application.

Challenges with img rendering:

Ensure your image is responsive on different screen sizes.
Specify image sizes for different devices.
Prevent layout shift as the images load.
Lazy load images that are outside the user's viewport.

NextJs <Image> component solves the above challenges
The <Image> Component is an extension of the HTML <img> tag, and comes with automatic image optimization, 
such as:

Preventing layout shift automatically when images are loading.
Resizing images to avoid shipping large images to devices with a smaller viewport.
Lazy loading images by default (images load as they enter the viewport).
Serving images in modern formats, like WebP and AVIF, when the browser supports it.

----------------------------------------------------------------------------------------------------

Layout: In Next.js, you can use a special layout.tsx file to create UI that is shared between multiple pages.
layout component takes the one or more page component or another layout as children and it can contain a 
component component shared across pages. 
Example. layout component in the dashboard folder app/dashboard/layout.tsx has the SideNav component that is shared across 
customers and invoices pages 

Root Layout: Any UI you add to the root layout will be shared across all pages in your application. 
You can use the root layout to modify your <html> and <body> tags, and add metadata.

The layout in /app/dashboard/layout.tsx is unique to the dashboard pages, you don't need to add any UI to the 
root layout.

Partial rendering:
One benefit of using layouts in Next.js is that on navigating to other pages, only the page components update 
while the layout won't re-render. In our example, the layout with SideNav does not re-render, only the customers 
and invoices pages page component is rendered

-----------------------------------------------------------------------------------------------------------
Link Component: Navigating between pages

To direct the user to a page we use the <a> tag with the link on href attribute, this approach will lead to 
full page refresh on each page navigation. 

The Link component provided by Next.js solves the full page refresh when the user navigates to different pages. 
NextJs looks for Link component and automatically splits the code and prefetches the page which the user will be redirected for that link

Automatic code splitting and prefetching:

To improve the navigation experience, Next.js automatically code splits your application by route segments.

Splitting code by routes means that pages become isolated. If a certain page throws an error, 
the rest of the application will still work.

Furthermore, in production, whenever <Link> components appear in the browser's viewport, Next.js automatically 
prefetches the code for the linked route in the background. 
By the time the user clicks the link, the code for the destination page will already be loaded in the background,
and this is what makes the page transition near-instant!

--------------------------------------------------------------------------------------------------------------------
Using Server Components to fetch data
By default, Next.js applications use React Server Components. Fetching data with Server Components is a 
relatively new approach and there are a few benefits of using them:

Server Components support promises, providing a simpler solution for asynchronous tasks like data fetching. 
You can use async/await syntax without reaching out for useEffect, useState or data fetching libraries.
Server Components execute on the server, so you can keep expensive data fetches and logic on the server and 
only send the result to the client. As Server Components execute on the server, you can query the database 
directly without an additional API layer.

This file contains type definitions for your data app/lib/definitions.ts 
This file contains the sql queries to fetch relevant data app/lib/data.ts

Request waterfalls: The data fetch request happens sequentially which means it will wait for the previous request
to complete and then calls the next request. This concept is fine to use if we want a condition to be satisfied before 
you make the next request. But it is not a good approach if the requests are not dependent.

Parallel data fetching: A common way to avoid waterfalls is to initiate all data requests at the same time 
in parallel.

In JavaScript, you can use the Promise.all() or Promise.allSettled() functions to initiate all promises at the same time. 
For example, in data.ts, we're using Promise.all() in the fetchCardData() function:

By using Parallel data fetching pattern, you can:

Start executing all data fetches at the same time, which can lead to performance gains.
Use a native JavaScript pattern that can be applied to any library or framework.

However, there is one disadvantage of relying only on this JavaScript pattern: 
what happens if one data request is slower than all the others? In case of dashboard, it has user data which is unique, 
there fore it is dynamic rendering and application is only as fast as your slowest data fetch.

By default, Next.js prerenders routes to improve performance, this is called Static Rendering. 
So if your data changes, it won't be reflected in your dashboard.

What is Static Rendering?

With static rendering, data fetching and rendering happens on the server at build time (when you deploy) or 
when revalidating data.

Whenever a user visits your application, the cached result is served. Benefits of static rendering:

1.Faster Websites - Prerendered content can be cached and globally distributed. This ensures that users 
around the world can access your website's content more quickly and reliably.

2.Reduced Server Load - Because the content is cached, your server does not have to dynamically generate content 
for each user request.

3.SEO - Prerendered content is easier for search engine crawlers to index, as the content is already 
available when the page loads. This can lead to improved search engine rankings.

Static rendering is useful for UI with no data or data that is shared across users, such as a static 
blog post or a product page. 
It might not be a good fit for a dashboard that has personalized data which is regularly updated.

What is Dynamic Rendering?
With dynamic rendering, content is rendered on the server for each user at request time 
(when the user visits the page). 
Benefits of dynamic rendering:

1.Real-Time Data - Dynamic rendering allows your application to display real-time or frequently updated data. 
This is ideal for applications where data changes often.
2.User-Specific Content - It's easier to serve personalized content, such as dashboards or user profiles, 
and update the data based on user interaction.
3.Request Time Information - Dynamic rendering allows you to access information that can only be known at 
request time, such as cookies or the URL search parameters.

Note: With dynamic rendering, your application is only as fast as your slowest data fetch.

--------------------------------------------------------------------------------------------------------------------------
What is streaming?
Streaming is a data transfer technique that allows you to break down a route into smaller "chunks" and 
progressively stream them from the server to the client as they become ready.

Benifit:
By streaming, you can prevent slow data requests from blocking your whole page. This allows the user to see 
and interact with parts of the page without waiting for all the data to load before any UI can be 
shown to the user.

There are two ways you implement streaming in Next.js:

1.For specific components, with <Suspense>.
2.Page Streaming using loading.tsx

Page Level Streaming with loaded.tsx
1.loading.tsx is a special Next.js file built on top of Suspense, it allows you to create 
fallback UI to show as a replacement while page content loads.
2.Since <SideNav> is static, it's shown immediately. The user can interact with <SideNav>
while the dynamic content is loading.
3.The user doesn't have to wait for the page to finish loading before navigating away 
(this is called interruptable navigation).

Component level streaming with Suspense:
Suspense allows you to defer rendering parts of your application until some condition 
is met (e.g. data is loaded). You can wrap your dynamic components in Suspense. 
Then, pass it a fallback component to show while the dynamic component loads.

Where you place your suspense boundaries will vary depending on your application. 
In general, it's good practice to move your data fetches down to the components 
that need it, and then wrap those components in Suspense. But there is nothing wrong 
with streaming the sections or the whole page if that's what your application needs.

-------------------------------------------------------------------------------------
Route Groups: 

If you create folder with enclosing the name in parenthesis, then NextJs
consider it as a route group. Route groups allow you to organize files into logical 
groups without affecting the URL path structure. 

When you create a new folder using parentheses (), the name won't be included in the URL path. 
So /dashboard/(overview)/page.tsx becomes /dashboard. 
You can use route groups to seperate your application into sections. 
Example (marketing) (sales)
----------------------------------------------------------------------------

Partial Prerendering (PPR):

Next.js 14 introduced an experimental version of Partial Prerendering – a new rendering 
model that allows you to combine the benefits of static and dynamic rendering 
in the same route.

Example: https://www.partialprerendering.com/

When a user visits a route:

1.A static route shell that includes the navbar and product information is served, 
ensuring a fast initial load.
2.The shell leaves holes where dynamic content like the cart and recommended products 
will load in asynchronously.
3.The async holes are streamed in parallel, reducing the overall load time of the page.

Implementing PPR:
The great thing about Partial Prerendering is that you don't need to change your code 
to use it. As long as you're using Suspense to wrap the dynamic parts of your route, 
Next.js will know which parts of your route are static and which are dynamic.